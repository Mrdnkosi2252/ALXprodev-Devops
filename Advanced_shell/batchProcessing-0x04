#!/bin/bash

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
ERROR_FILE="errors.txt"
MAX_PARALLEL=3  # Max concurrent fetches

mkdir -p "$OUTPUT_DIR"
: > "$ERROR_FILE"  # Reset error log

fetch_pokemon() {
    local pokemon="$1"
    local output_file="$OUTPUT_DIR/$pokemon.json"
    echo "Fetching data for $pokemon..."
    curl -s -o "$output_file" "https://pokeapi.co/api/v2/pokemon/$pokemon" 2>> "$ERROR_FILE"
    if [ $? -eq 0 ] && [ -s "$output_file" ]; then
        echo "Saved data to $output_file "
    else
        echo "Failed to fetch data for $pokemon" >> "$ERROR_FILE"
    fi
}

# Main parallel loop using batching
batch=()
for POKEMON in "${POKEMONS[@]}"; do
    fetch_pokemon "$POKEMON" &
    batch+=($!)
    if (( ${#batch[@]} >= MAX_PARALLEL )); then
        for pid in "${batch[@]}"; do
            wait "$pid"
        done
        batch=()  # Reset batch
    fi
done

# Final cleanup for any leftover processes
for pid in "${batch[@]}"; do
    wait "$pid"
done

echo " All Pok√©mon fetched and background jobs completed."
